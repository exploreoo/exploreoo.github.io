import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,f as r,o as a}from"./app-DkeCzSGI.js";const c={};function n(i,e){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="react架构" tabindex="-1"><a class="header-anchor" href="#react架构"><span>React架构</span></a></h1><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><ul><li>声明式的视图层。采用的是JSX语法声明视图层，因此可以在视图层随意使用各种状态的数据</li><li>灵活的渲染实现。生成的虚拟DOM只是普通的JS对象，可以利用其他依赖库把这个对象渲染成不同的UI，也就是具备了跨平台的能力。例如使用react-dom在浏览器上渲染，使用React Native在手机上渲染</li><li>高效的DOM操作。虚拟DOM与真实DOM之间利用差异化算法，尽量减少真实DOM的渲染次数和改变节点的数量</li></ul><p>render阶段</p><ul><li>开始于<code>performSyncWorkOnRoot</code>或<code>performConcurrentWorkOnRoot</code>方法</li><li>判断本次更新是同步还是异步（是否调用<code>shouldYield</code>方法，代表浏览器帧有没有剩余时间，该方法会终止循环，直到浏览器有空闲时间再继续后续遍历）</li><li>递归构建Fiber节点<code>并赋值给</code>workInProgress，并将<code>workInProgress</code>与已创建的<code>Fiber节点</code>连接起来构成<code>Fiber树</code></li></ul>',5)]))}const p=t(c,[["render",n]]),s=JSON.parse('{"path":"/posts/%E6%A1%86%E6%9E%B6/react.html","title":"React架构","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2025-02-20T00:00:00.000Z","category":["前端","React"],"tag":["React"],"description":"React架构 特点 声明式的视图层。采用的是JSX语法声明视图层，因此可以在视图层随意使用各种状态的数据 灵活的渲染实现。生成的虚拟DOM只是普通的JS对象，可以利用其他依赖库把这个对象渲染成不同的UI，也就是具备了跨平台的能力。例如使用react-dom在浏览器上渲染，使用React Native在手机上渲染 高效的DOM操作。虚拟DOM与真实DO...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-03T05:50:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E6%A1%86%E6%9E%B6/react.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"React架构"}],["meta",{"property":"og:description","content":"React架构 特点 声明式的视图层。采用的是JSX语法声明视图层，因此可以在视图层随意使用各种状态的数据 灵活的渲染实现。生成的虚拟DOM只是普通的JS对象，可以利用其他依赖库把这个对象渲染成不同的UI，也就是具备了跨平台的能力。例如使用react-dom在浏览器上渲染，使用React Native在手机上渲染 高效的DOM操作。虚拟DOM与真实DO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T05:50:20.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2025-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T05:50:20.000Z"}]]},"git":{"createdTime":1751621450000,"updatedTime":1756878620000,"contributors":[{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":5,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"posts/框架/react.md","excerpt":"\\n<h2>特点</h2>\\n<ul>\\n<li>声明式的视图层。采用的是JSX语法声明视图层，因此可以在视图层随意使用各种状态的数据</li>\\n<li>灵活的渲染实现。生成的虚拟DOM只是普通的JS对象，可以利用其他依赖库把这个对象渲染成不同的UI，也就是具备了跨平台的能力。例如使用react-dom在浏览器上渲染，使用React Native在手机上渲染</li>\\n<li>高效的DOM操作。虚拟DOM与真实DOM之间利用差异化算法，尽量减少真实DOM的渲染次数和改变节点的数量</li>\\n</ul>\\n<p>render阶段</p>\\n<ul>\\n<li>开始于<code>performSyncWorkOnRoot</code>或<code>performConcurrentWorkOnRoot</code>方法</li>\\n<li>判断本次更新是同步还是异步（是否调用<code>shouldYield</code>方法，代表浏览器帧有没有剩余时间，该方法会终止循环，直到浏览器有空闲时间再继续后续遍历）</li>\\n<li>递归构建Fiber节点<code>并赋值给</code>workInProgress，并将<code>workInProgress</code>与已创建的<code>Fiber节点</code>连接起来构成<code>Fiber树</code></li>\\n</ul>","autoDesc":true}');export{p as comp,s as data};
