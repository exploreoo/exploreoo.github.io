import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as i,a as n,o as e}from"./app-DkeCzSGI.js";const l={};function h(k,s){return e(),a("div",null,[s[0]||(s[0]=i('<h1 id="uselayouteffect-vs-useeffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect-vs-useeffect"><span>useLayoutEffect Vs useEffect</span></a></h1><p><code>useLayoutEffect</code> 和 <code>useEffect</code> 都是 React 提供的 Hook，用于处理副作用，但它们在执行时机上有重要区别。</p><h2 id="主要区别" tabindex="-1"><a class="header-anchor" href="#主要区别"><span>主要区别</span></a></h2><table><thead><tr><th>特性</th><th><code>useEffect</code></th><th><code>useLayoutEffect</code></th></tr></thead><tbody><tr><td><strong>执行时机</strong></td><td>在浏览器绘制<strong>之后</strong>异步执行</td><td>在浏览器绘制<strong>之前</strong>同步执行</td></tr><tr><td><strong>对用户的影响</strong></td><td>可能导致布局闪烁</td><td>阻止浏览器绘制直到 effect 完成</td></tr><tr><td><strong>使用场景</strong></td><td>数据获取、订阅等</td><td>需要同步读取/操作 DOM 的情况</td></tr><tr><td><strong>性能影响</strong></td><td>对渲染性能影响较小</td><td>可能阻塞渲染，导致性能问题</td></tr></tbody></table>',4)),n(" more "),s[1]||(s[1]=i(`<h2 id="详细解释" tabindex="-1"><a class="header-anchor" href="#详细解释"><span>详细解释</span></a></h2><h3 id="_1-执行时机" tabindex="-1"><a class="header-anchor" href="#_1-执行时机"><span>1. 执行时机</span></a></h3><ul><li><p><strong><code>useEffect</code></strong>:</p><ul><li>在组件渲染到屏幕<strong>之后</strong>执行</li><li>异步执行，不会阻塞浏览器绘制</li></ul></li><li><p><strong><code>useLayoutEffect</code></strong>:</p><ul><li>在 React 计算完 DOM 变更后，但在浏览器实际绘制<strong>之前</strong>执行</li><li>同步执行，会阻塞浏览器绘制</li></ul></li></ul><h3 id="_2-使用场景示例" tabindex="-1"><a class="header-anchor" href="#_2-使用场景示例"><span>2. 使用场景示例</span></a></h3><p><strong>适合 <code>useLayoutEffect</code> 的情况</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Tooltip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ref</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">position</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">setPosition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">top</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">left</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  useLayoutEffect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 在浏览器绘制前测量元素位置</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBoundingClientRect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setPosition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">top</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">left</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }, []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> style</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">={{ position: &quot;absolute&quot;, ...position }}&gt;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">      Tooltip</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  );</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>适合 <code>useEffect</code> 的情况</strong>：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserProfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">setUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  useEffect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异步获取数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    fetchUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }, [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-为什么选择其中一个而不是另一个" tabindex="-1"><a class="header-anchor" href="#_3-为什么选择其中一个而不是另一个"><span>3. 为什么选择其中一个而不是另一个</span></a></h3><ul><li><p><strong>使用 <code>useLayoutEffect</code> 当</strong>：</p><ul><li>你需要读取 DOM 布局并同步触发重渲染</li><li>你需要执行 DOM 操作以避免视觉闪烁或不一致</li></ul></li><li><p><strong>使用 <code>useEffect</code> 当</strong>：</p><ul><li>你的副作用不需要与 DOM 交互</li><li>你的代码可以容忍短暂的布局不一致</li><li>你需要执行数据获取或订阅等异步操作</li></ul></li></ul><h2 id="重要注意事项" tabindex="-1"><a class="header-anchor" href="#重要注意事项"><span>重要注意事项</span></a></h2><ol><li><p><strong>服务端渲染 (SSR)</strong>：</p><ul><li><code>useLayoutEffect</code> 在 SSR 期间会导致警告（因为它不能在服务端执行）</li><li>在 SSR 应用中，React 建议先用 <code>useEffect</code>，如果发现问题再考虑 <code>useLayoutEffect</code></li></ul></li><li><p><strong>性能影响</strong>：</p><ul><li>过度使用 <code>useLayoutEffect</code> 可能导致性能问题，因为它会阻塞渲染</li><li>大多数情况下 <code>useEffect</code> 是更好的默认选择</li></ul></li><li><p><strong>执行顺序</strong>：</p><ul><li>在同一个组件中，<code>useLayoutEffect</code> 总是比 <code>useEffect</code> 先执行</li></ul></li></ol><h2 id="经验法则" tabindex="-1"><a class="header-anchor" href="#经验法则"><span>经验法则</span></a></h2><ol><li><strong>默认使用 <code>useEffect</code></strong> - 这是最安全的选择</li><li><strong>只有在需要同步测量或操作 DOM 时才使用 <code>useLayoutEffect</code></strong></li><li><strong>如果你不确定，先尝试 <code>useEffect</code>，只有出现视觉问题时再考虑 <code>useLayoutEffect</code></strong></li></ol>`,14))])}const r=t(l,[["render",h]]),o=JSON.parse('{"path":"/posts/%E6%A1%86%E6%9E%B6/effect.html","title":"useLayoutEffect Vs useEffect","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2025-02-20T00:00:00.000Z","category":["前端","React"],"tag":["React"],"description":"useLayoutEffect 和 useEffect 都是 React 提供的 Hook，用于处理副作用，但它们在执行时机上有重要区别。 主要区别","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useLayoutEffect Vs useEffect\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-29T03:38:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E6%A1%86%E6%9E%B6/effect.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"useLayoutEffect Vs useEffect"}],["meta",{"property":"og:description","content":"useLayoutEffect 和 useEffect 都是 React 提供的 Hook，用于处理副作用，但它们在执行时机上有重要区别。 主要区别"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-29T03:38:55.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2025-02-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-29T03:38:55.000Z"}]]},"git":{"createdTime":1746970362000,"updatedTime":1756438735000,"contributors":[{"name":"exploreoo","username":"exploreoo","email":"1848820553@qq.com","commits":1,"url":"https://github.com/exploreoo"},{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":6,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":2.02,"words":605},"filePathRelative":"posts/框架/effect.md","excerpt":"\\n<p><code>useLayoutEffect</code> 和 <code>useEffect</code> 都是 React 提供的 Hook，用于处理副作用，但它们在执行时机上有重要区别。</p>\\n<h2>主要区别</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>特性</th>\\n<th><code>useEffect</code></th>\\n<th><code>useLayoutEffect</code></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>执行时机</strong></td>\\n<td>在浏览器绘制<strong>之后</strong>异步执行</td>\\n<td>在浏览器绘制<strong>之前</strong>同步执行</td>\\n</tr>\\n<tr>\\n<td><strong>对用户的影响</strong></td>\\n<td>可能导致布局闪烁</td>\\n<td>阻止浏览器绘制直到 effect 完成</td>\\n</tr>\\n<tr>\\n<td><strong>使用场景</strong></td>\\n<td>数据获取、订阅等</td>\\n<td>需要同步读取/操作 DOM 的情况</td>\\n</tr>\\n<tr>\\n<td><strong>性能影响</strong></td>\\n<td>对渲染性能影响较小</td>\\n<td>可能阻塞渲染，导致性能问题</td>\\n</tr>\\n</tbody>\\n</table>\\n","autoDesc":true}');export{r as comp,o as data};
