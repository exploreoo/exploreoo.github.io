import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as i,a as n,o as t}from"./app-DkeCzSGI.js";const l={};function o(d,s){return t(),a("div",null,[s[0]||(s[0]=i('<h1 id="页面性能优化" tabindex="-1"><a class="header-anchor" href="#页面性能优化"><span>页面性能优化</span></a></h1><h4 id="性能优化目标" tabindex="-1"><a class="header-anchor" href="#性能优化目标"><span>性能优化目标</span></a></h4><ul><li><h5 id="保证资源更快的-加载速度-网络层面" tabindex="-1"><a class="header-anchor" href="#保证资源更快的-加载速度-网络层面"><span><strong>保证资源更快的 加载速度（网络层面）</strong></span></a></h5></li><li><h5 id="保证视图更快的-渲染速度-交互速度-浏览器层面" tabindex="-1"><a class="header-anchor" href="#保证视图更快的-渲染速度-交互速度-浏览器层面"><span><strong>保证视图更快的 渲染速度/交互速度 （浏览器层面）</strong></span></a></h5></li></ul>',3)),n(" more "),s[1]||(s[1]=i(`<h4 id="性能检测工具" tabindex="-1"><a class="header-anchor" href="#性能检测工具"><span>性能检测工具</span></a></h4><ul><li><p><code>Network</code></p></li><li><p><code>performance</code> 面板（提供一个具体的执行过程)</p></li><li><p><code>lighthouse</code> 面板（网站整体评估)</p></li><li><p><code>webPageTest</code>、 <code>webpack-bundle-analyze</code>（依赖打包构建图）、 <code>speed-measure-webpack-plugin</code>（构建费时分析）</p></li></ul><h4 id="性能指标数据收集" tabindex="-1"><a class="header-anchor" href="#性能指标数据收集"><span>性能指标数据收集</span></a></h4><ul><li><p><code>performance API</code></p><p>浏览器端的全局对象 <code>window</code> 上有一个名为 <code>performance</code> 的属性，它是一个用于支持 <code>IE9</code> 以上及 <code>webkit</code> 内核浏览器中用于记录页面 <strong>加载</strong> 和 <strong>解析</strong> 过程中关键时间点的机制</p></li><li><p><code>Web Vitals</code> 模块化库</p></li></ul><h4 id="常规性能指标" tabindex="-1"><a class="header-anchor" href="#常规性能指标"><span>常规性能指标</span></a></h4><p><code>Google</code> 为前端页面性能的评估提出了 <code>RAIL</code> 模型，核心内容如下：</p><ul><li><p><strong><code>Response</code> 响应</strong></p></li><li><p><strong><code>Animation</code> 动画</strong></p></li><li><p><strong><code>Idle</code> 空闲</strong></p></li><li><p><strong><code>Load</code> 加载</strong></p><hr><p><strong>首次绘制（<code>First Paint，FP</code>）</strong></p><ul><li>在渲染进程确认要渲染当前响应资源后，渲染进程会先创建一个空白页面，通常把创建空白页面的这个时间点称为 <code>First Paint</code>，简称 <code>FP</code></li><li>所谓的 <strong>白屏时间</strong> 其实指的就是创建这个空白页面到浏览器开始渲染非空白内容的时间，比如页面背景发生变化等</li></ul><p><strong>首次内容绘制（<code>First Contentful Paint，FCP</code>）</strong></p><ul><li>当用户看见一些 &quot;内容&quot; 元素被绘制在页面上的时间点，和白屏是不一样，它可以是 <strong><code>文本</code></strong> 首次绘制，或 <code>SVG</code> 首次出现，或 <code>Canvas</code> 首次绘制等，即当页面中绘制了第一个 <strong>像素</strong> 时，这个时间点称为 <code>First Content Paint</code>，简称 <code>FCP</code></li></ul><p><strong>首屏时间 / 最大内容绘制（<code>Largest Contentful Paint, LCP</code>）</strong></p><ul><li><code>LCP</code> 是一种新的性能度量标准，<code>LCP</code> 侧重于用户体验的性能度量标准，与现有度量标准相比，更容易理解与推理，当首屏内容完全绘制完成时，这个时间点称为 <code>Largest Content Paint</code>，简称 <code>LCP</code></li><li><strong>最大内容绘制应在 <code>2.5s</code> 内完成</strong></li></ul><p><strong>首次输入延迟（<code>First Input Delay, FID</code>）</strong></p><ul><li><code>FID</code> 测量的是当用户第一次在页面上交互的时候（<strong>点击链接</strong>、<strong>点击按钮</strong> 或 <strong>自定义基于 <code>js</code> 的事件</strong>），到浏览器实际开始处理这个事件的时间</li><li><strong>首次输入延迟应在 <code>100ms</code> 内完成</strong></li></ul><p><strong>累积布局偏移（<code>Cumulative Layout Shift, CLS</code>)</strong></p><ul><li><code>CLS</code> 是为了测量 <strong>视觉稳定性</strong>，以便提供良好的用户体验</li><li><strong>累积布局偏移应保持在 <code>0.1</code> 或更少</strong></li></ul><p><strong>首字节达到时间（<code>Time to First Byte，TTFB</code>）</strong></p><ul><li>指的是浏览器开始收到服务器响应数据的时间（<strong>后台处理时间 + 重定向时间</strong>），是反映服务端响应速度的重要指标</li><li><code>TTFB</code> 时间如果超过 <code>500ms</code>，用户在打开网页的时就会感觉到明显的等待</li></ul></li></ul><h4 id="_1、保证资源更快的加载速度" tabindex="-1"><a class="header-anchor" href="#_1、保证资源更快的加载速度"><span>1、保证资源更快的加载速度</span></a></h4><ul><li><h5 id="使用-dns-prefetch-减少-dns-的查询时间" tabindex="-1"><a class="header-anchor" href="#使用-dns-prefetch-减少-dns-的查询时间"><span><strong>使用 <code>dns-prefetch</code> 减少 DNS 的查询时间</strong></span></a></h5><p><code>dns-prefetch</code> 能够 <strong>提前解析</strong> 后续可能会用到的 <strong>不同域的域名</strong>，使解析结果 <strong>缓存到系统缓存</strong> 中，缩短 <code>DNS</code> 解析时间以提高网站的访问速度。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//api.xxx1.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//api.xxx2.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dns-prefetch&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//api.xxx3.cn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="使用-preconnect-提前建立连接" tabindex="-1"><a class="header-anchor" href="#使用-preconnect-提前建立连接"><span><strong>使用 <code>preconnect</code> 提前建立连接</strong></span></a></h5><p><code>preconnect</code> 的作用是提前和第三方资源建立连接，设置了它浏览器就会做好早期的连接工作，但这个连接通常只会维持 <code>10 s</code>。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preconnect&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//xxx.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><h5 id="使用-preload-prefetch-预先加载资源" tabindex="-1"><a class="header-anchor" href="#使用-preload-prefetch-预先加载资源"><span><strong>使用 <code>preload / prefetch</code> 预先加载资源</strong></span></a></h5><ul><li><p><code>preload</code> 的作用是提前加载页面对应的 <strong>关键资源</strong> 加快页面的渲染，<code>preload</code> 的优先级顺序和 <code>as</code> 属性相关</p><p><code>preload</code> 是对资源的预加载，它虽提前加载但只在需要执行时执行，即这个资源一定是当前页面所需要的资源</p><p>不会阻塞 <code>onload</code> 事件，<code>preload</code> 加载的<code>JS</code>脚本其加载和执行的过程是分离的，即 <code>preload</code> 会预加载相应的脚本代码，待到需要时自行调用</p></li><li><p>如果是需要为下一个页面提前加载资源，那么应该使用 <code>prefetch</code>，它会在 <strong>浏览器空闲时</strong> 下载资源。</p></li></ul><p><code>v-cli</code>默认有配置 <code>preload / prefetch</code></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// as</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">属性一定要设置，除了上面提到的设置优先级外，还涉及到浏览识别的问题：如果没有设置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">as 属性，后续遇到该请求就会被作为一个 XHR</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求，把意味着资源预加载的功能可能会失效，因为可能会每次都发起新的请求获取</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;preload&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//xxx.com&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;script&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h5 id="压缩资源体积" tabindex="-1"><a class="header-anchor" href="#压缩资源体积"><span><strong>压缩资源体积</strong></span></a></h5><p>资源是需要通过 <code>http</code> 数据包的方式在网络中进行传输的，那么只要能减少传输数据包的体积，也是能够使得资源更快到达客户端，这也是压缩资源体积的核心目的。</p><ul><li><p><strong>HTTP 压缩</strong></p><ul><li><code>gzip</code></li></ul></li><li><p><strong>Webpack 压缩</strong></p><ul><li>使用 <code>CompressionPlugin</code> 压缩文件</li><li>使用 <code>HtmlWebpackPlugin</code> 压缩 <code>HTML</code> 文件</li><li>使用 <code>MiniCssExtractPlugin</code> 抽离和压缩 <code>CSS</code></li><li>使用 <code>ImageMinimizerWebpackPlugin</code> 压缩图片资源</li><li>使用 <code>SplitChunksPlugin</code> 自定义分包策略</li><li>通过 <code>Tree Shaking</code> 移除无用代码</li></ul></li></ul></li><li><h5 id="减少-http-请求数量" tabindex="-1"><a class="header-anchor" href="#减少-http-请求数量"><span><strong>减少 http 请求数量</strong></span></a></h5><ul><li>合并公共资源，如 雪碧图 等</li><li>内置模块资源，如 生成 <code>base64</code> 图片、通过 <code>symbol</code> 引用 <code>svg</code> 等</li><li>合并代码块，如构建工具分包策略配合 公共组件封装、组件复用逻辑抽离 等</li><li>按需加载资源，如 路由懒加载、图片懒加载、上拉加载、分页加载 等</li></ul></li><li><h5 id="减少不必要的-cookie" tabindex="-1"><a class="header-anchor" href="#减少不必要的-cookie"><span><strong>减少不必要的 cookie</strong></span></a></h5><p>不必要的 <code>cookie</code> 来回传输会造成带宽浪费：</p><ul><li>减少 <code>cookie</code> 存储的内容</li><li>对于静态资源采用 <code>CDN</code> 托管（即非同域），不同域名默认不携带 <code>cookie</code></li></ul></li><li><h5 id="cdn-托管静态资源加速-http-缓存" tabindex="-1"><a class="header-anchor" href="#cdn-托管静态资源加速-http-缓存"><span><strong>CDN 托管静态资源加速 + HTTP 缓存</strong></span></a></h5><ul><li><p>强缓存、协商缓存</p></li><li><p><code>keep-alive</code>、<code>v-once</code>、<code>v-memo</code></p></li></ul></li><li><h5 id="协议升级为-http2-0" tabindex="-1"><a class="header-anchor" href="#协议升级为-http2-0"><span><strong>协议升级为 Http2.0</strong></span></a></h5><p><code>http1.0</code> 中使用的是 <strong>短连接</strong>，即 <strong>一次请求/响应</strong> 结束后就会断开连接，这个过程比较耗时</p><p><code>http1.1</code> 中使用的是 <strong>长连接</strong>，在 <strong>请求/响应头</strong> 中设置 <code>Connection: keep-alive</code> 即可开启，优点是 <strong>长连接</strong> 允许多个请求共用一个 <code>TCP</code> 连接，缺点是带来了 <strong>队头阻塞</strong>：</p><ul><li>每个 <code>TCP</code> 连接中的多个请求，需要进行排队，只有队头的请求被响应，才能继续处理下一个请求</li><li>其中一个缓解方案就是如果当前 <code>TCP</code> 连接中发生 <strong>队头阻塞</strong>，那就将部分请求放到其他 <code>TCP</code> 连接中</li><li>浏览器一般会限制同一个域名建立 <code>6-8</code> 个 <code>TCP</code> 链接，这也就是为什么需要为应用划分子域名、静态资源托管 <code>CDN</code> 的原因之一</li></ul><p><code>http1.x</code> 中 <code>header</code> 部分的内容可能会很大，而且每一个请求可能都需要携带大量 <strong>重复</strong> <code>header</code> 的 <strong>文本内容</strong>，而这些也是导致 <strong>请求/响应</strong> 慢的原因之一</p><p><code>http2.0</code>基于<code>https</code>协议，采用<strong>头部压缩、二进制传输、多路复用</strong>，避免浏览器请求拥堵导致耗时。</p></li></ul><h4 id="_2、保证视图更快的渲染和交互" tabindex="-1"><a class="header-anchor" href="#_2、保证视图更快的渲染和交互"><span>2、保证视图更快的渲染和交互</span></a></h4><ul><li><h5 id="渲染层面" tabindex="-1"><a class="header-anchor" href="#渲染层面"><span><strong>渲染层面</strong></span></a></h5><ul><li><h6 id="减少阻塞渲染的因素" tabindex="-1"><a class="header-anchor" href="#减少阻塞渲染的因素"><span><strong>减少阻塞渲染的因素</strong></span></a></h6><p>真正渲染视图之前，必然要生成 <strong><code>DOM Tree</code></strong> 和 <strong><code>CSSOM</code></strong>，因此必须保证 <strong>HTML 解释器</strong> 和 <strong>CSS 解释器</strong> 都尽早处理完成，同时 <strong><code>JavaScript</code></strong> 的加载和执行可能会阻塞这个过程：</p><ul><li><code>HTML</code> 文档中首次渲染的节点数量要尽量少，避免深层次的嵌套结构，避免大量使用慢标签（如：<code>iframe</code>）等</li><li><code>CSS</code> 资源放文档头部，降低 <code>CSS</code> 复杂度，比如 合理使用 <code>CSS</code> 选择器</li><li><code>JavaScript</code> 资源放文档底部，合理使用 <strong><code>defer、async</code></strong> 的加载方式</li></ul></li><li><h6 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载"><span><strong>懒加载</strong></span></a></h6><p>懒加载主要是针对数量大、资源加载慢的情况，比如图片资源、大量列表数据展示等：</p><ul><li><p><strong>图片资源</strong>：优先加载在可视区范围内的图片，可视区外的图片 <strong><code>延后加载</code></strong>，或者说当移入的可视区时再加载</p></li><li><p><strong>列表数据</strong>：列表数据通常数据里量大，不可能一次渲染完所有数据，一般通过 <strong><code>分页加载、上拉加载</code></strong> 等方式分批次渲染</p></li><li><p><strong>路由懒加载</strong></p><p><code>webpackChunkName</code> 作用是 <code>webpack</code> 在打包的时候，对异步引入的库代码（<code>lodash</code>）进行代码分割时，设置代码块的名字。<code>webpack</code>会将任何一个异步模块与相同的块名称组合到相同的异步块中。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 通过webpackChunkName设置分割后代码块的名字</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Home</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* webpackChunkName: &quot;home&quot; */</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@/views/home/index.vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MetricGroup</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* webpackChunkName: &quot;metricGroup&quot; */</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@/views/metricGroup/index.vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> routes</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;home&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    component</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Home</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/metricGroup&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;metricGroup&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    component</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> MetricGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>组件懒加载</strong></p><p>组件懒加载 <em>基于动态<code>import</code></em> / <strong><em><code>defineAsyncComponent</code></em></strong>，有时资源拆分的过细也不好，可能会造成浏览器 <code>http</code> 请求的增多。</p><p>总结出三种适合组件懒加载的场景：</p><p>1）该页面的 JS 文件体积大，导致页面打开慢，可以通过组件懒加载进行资源拆分，利用浏览器并行下载资源，提升下载速度（比如首页）</p><p>2）该组件不是一进入页面就展示，需要一定条件下才触发（比如弹框组件）</p><p>3）该组件复用性高，很多页面都有引入，利用组件懒加载抽离出该组件，一方面可以很好利用缓存，同时也可以减少页面的 JS 文件大小（比如表格组件、图形组件等）</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">const dialogInfo = () =&gt; import(/* webpackChunkName: &quot;dialogInfo&quot; */ &#39;@/components/dialogInfo&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">export default </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;homeView&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  components</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    dialogInfo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h6 id="白屏优化" tabindex="-1"><a class="header-anchor" href="#白屏优化"><span><strong>白屏优化</strong></span></a></h6><p>白屏是由于 <code>SPA</code> 应用需要等待 <code>JavaScript</code> 加载并执行完成后才会生成具体的页面结构内容导致的，即初始化模板中没有任何有意义需要被渲染的 <code>HTML</code> 结构：</p><ul><li>添加 <strong>白屏 <code>loading</code></strong>，可在模板中添加默认的 <code>loading</code> 效果，等到真正页面内容被渲染就可以替换 <code>loading</code> 内容</li><li>添加 <strong>骨架屏</strong>，和上述方案一致，在真正页面内容展示出来之前，先展示默认的视图内容，避免白屏</li></ul></li><li><h6 id="服务端渲染-ssr" tabindex="-1"><a class="header-anchor" href="#服务端渲染-ssr"><span><strong>服务端渲染（SSR）</strong></span></a></h6></li><li><h6 id="预渲染-prerender" tabindex="-1"><a class="header-anchor" href="#预渲染-prerender"><span><strong>预渲染（prerender）</strong></span></a></h6><p>上述 <strong>服务端渲染（server-side rendering，SSR）</strong> 虽然能够解决一些客户端存在的问题，但它也带来了别的问题：</p><ul><li><strong><code>需要保证开发一致性</code></strong>，比如 <strong>服务端</strong> 和 <strong>客户端</strong> 能够执行的组件生命周期钩子不同，一些外部库在 <strong>服务端渲染</strong> 应用中可能需要经过特殊处理</li><li><strong><code>需要更多的构建设定和部署要求</code></strong>，一个完全静态的 <strong>SPA</strong> 可以部署在任意的静态文件服务器，但服务端渲染应用需要一个能够运行 <strong>Node.js</strong> 服务器的环境</li><li><strong><code>更多的服务端负载</code></strong>，在 <strong>Node.js</strong> 中渲染一个完整的应用，会比仅供应静态文件产生更密集的 <strong>CPU</strong> 运算，并且需要考虑访问流量过大的情况等</li></ul><p>因此，并不是所有应用都合适 <strong>服务端渲染</strong>，如果只是希望通过 <strong>SSR</strong> 来改善一些 <strong>推广页面</strong> (如 <code>/</code>、<code>/about</code>、<code>/contact</code> 等) 的 <strong>SEO</strong>，那么应该优先考虑 <strong>预渲染</strong> 的方式：</p><ul><li><strong>预渲染</strong> 是在打包构建过程中（离屏状态），针对对应的 <code>routes</code> 路由预先生成对应的页面内容</li><li><strong>预渲染</strong> 需要和 <strong>打包构建工具（webpack、rollup 等）</strong> 进行配合，如 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.js.org%2F" target="_blank" rel="noopener noreferrer"><strong><code>webpack</code></strong></a>，就可通过 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchrisvfritz%2Fprerender-spa-plugin" target="_blank" rel="noopener noreferrer"><strong><code>prerender-spa-plugin</code></strong></a> 来支持 <strong>预渲染</strong></li></ul></li><li><h6 id="requestanimationframe-制作动画" tabindex="-1"><a class="header-anchor" href="#requestanimationframe-制作动画"><span><code>requestAnimationFrame</code> 制作动画</span></a></h6><p><code>requestAnimationFrame</code> 是浏览器专门为动画提供的<code> API</code>，属于GUI引擎，它的刷新频率与显示器的频率保持一致，使用该 <code>api</code> 可以解决用 <code>setTimeout/setInterval</code> 制作动画卡顿的情况。</p></li></ul></li><li><h5 id="交互层面" tabindex="-1"><a class="header-anchor" href="#交互层面"><span><strong>交互层面</strong></span></a></h5><ul><li><h6 id="减少回流-重绘" tabindex="-1"><a class="header-anchor" href="#减少回流-重绘"><span><strong>减少回流/重绘</strong></span></a></h6><ul><li>避免对 <code>css</code> 进行单个修改，如在 <code>JavaScript</code> 修改多个样式时，尽量使用 <code>css</code> 选择器实现样式的集中变更</li><li>使用定位，利用<code>GPU</code>加速 <code>transform</code>、<code>opacity</code>、<code>filter</code>、<code>will-change</code>...，使用 <code>will-change</code> 开启 <code>GPU</code> 加速，<code>will-change</code> 指定的属性使得浏览器可在元素属性真正发生变化之前提前做好对应的优化</li><li>预先设定图片尺寸，避免图片资源加载完成后引发回流</li></ul></li><li><h6 id="防抖-节流" tabindex="-1"><a class="header-anchor" href="#防抖-节流"><span><strong>防抖/节流</strong></span></a></h6><p><strong>防抖</strong>：多次频繁触发执行操作，以 <strong>最后一次</strong> 为准，忽略中间过程</p><p><strong>节流</strong>：在指定的时间间隔内，<strong>只允许</strong> 执行一次对应的操作</p><p>合理使用 <strong><code>防抖/节流</code></strong> 优化应用中的操作，比如 <strong><code>节流</code></strong> 可用于优化 滚动事件、模糊搜索等，<strong><code>防抖</code></strong> 可用于优化一些按钮点击操作等。</p></li><li><h6 id="web-worker" tabindex="-1"><a class="header-anchor" href="#web-worker"><span><strong>Web Worker</strong></span></a></h6><p><code>JavaScript</code> 是单线程的，如果存在需要大量计算的场景（如视频解码），<code>UI</code> 线程就会被阻塞，甚至浏览器直接卡死。</p><p><code>Web Worker</code> 可以使脚本运行在新的线程中，它们独立于主线程，可以进行大量的计算活动，而不会影响主线程的 <code>UI</code> 渲染，但不能滥用 <code>Web Worker</code> 。</p><p>由于浏览器 <code>GUI</code> 渲染线程与 <code>JS</code> 引擎线程是互斥的关系，当页面中有很多长任务时，会造成页面 <code>UI</code> 阻塞，出现界面卡顿、掉帧等情况，<u><strong>当任务的运算时长 - 通信时长 &gt; <code>50ms</code>，推荐使用Web Worker</strong></u>。并不是执行时间超过 <code>50ms</code> 的任务，就可以使用 Web Worker，还要先考虑<code>通信时长</code>的问题，假如一个运算执行时长为 <code>100ms</code>，但是通信时长为 <code>300ms</code>， 用了 Web Worker可能会更慢。</p></li><li><h6 id="虚拟列表" tabindex="-1"><a class="header-anchor" href="#虚拟列表"><span><strong>虚拟列表</strong></span></a></h6><p>比如<code> vue-virtual-scroller</code>、<code>vue-virtual-scroll-list</code>、<code>react-tiny-virtual-list</code>、<code>react-virtualized</code> 等</p><p><code> vue-virtual-scroller</code>示例</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 安装插件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">npm</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> install</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> vue</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">virtual</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scroller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> VueVirtualScroller</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue-virtual-scroller&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue-virtual-scroller/dist/vue-virtual-scroller.css&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">VueVirtualScroller</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RecycleScroller</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scroller&quot;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    :items=&quot;list&quot;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    :item-size=&quot;32&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    key-field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    v-slot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{ item }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {{ item.name }} &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RecycleScroller</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h6 id="大文件分片上传" tabindex="-1"><a class="header-anchor" href="#大文件分片上传"><span><strong>大文件分片上传</strong></span></a></h6></li><li><h6 id="excel-导入-导出" tabindex="-1"><a class="header-anchor" href="#excel-导入-导出"><span><strong>Excel 导入/导出</strong></span></a></h6></li></ul></li></ul><h4 id="_3、vue-项目的优化" tabindex="-1"><a class="header-anchor" href="#_3、vue-项目的优化"><span>3、Vue 项目的优化</span></a></h4><p>简单列举一些内容（包括但不限于）：</p><ul><li>减少响应式数据的生成，对于纯展示、又需要使用在 <code>template</code> 模板中使用的数据，可使用 <code>Object.freeze()</code> 进行冻结，避免被转为 <strong>不必要的响应式数据</strong></li><li><code>Vue</code> 组件初始化是比较损耗性能的，使用 <strong>函数式组件</strong> 减少组件初始化的过程，适用于实现没有业务逻辑只展示内容的简单组件</li><li>合理使用 <code>v-show</code> 和 <code>v-if</code>、为 <code>v-for</code> 组件设定唯一 <code>key</code>（非 <code>index</code>）、<code>v-for</code> 和 <code>v-if</code> 不要一起使用等</li><li>使用 <code>KeepAlive</code> 复用组件，避免组件重复的创建、销毁带来的性能损耗</li><li>使用 <code>() =&gt; import(xxx)</code> 方式实现路由懒加载</li><li>使用 <code>ESM</code> 的方式封装自定义工具库等</li><li>针对第三方库做到按需引入</li><li>合理使用闭包，避免造成内存泄漏</li><li>及时清除组件中的副作用，比如 <code>setTimeout、setInterval、addEventListener</code> 等</li></ul>`,14))])}const p=e(l,[["render",o]]),c=JSON.parse('{"path":"/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"页面性能优化","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2024-11-30T00:00:00.000Z","category":["前端","性能优化"],"tag":["性能优化"],"description":"性能优化目标 保证资源更快的 加载速度（网络层面） 保证视图更快的 渲染速度/交互速度 （浏览器层面）","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"页面性能优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-29T03:38:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"页面性能优化"}],["meta",{"property":"og:description","content":"性能优化目标 保证资源更快的 加载速度（网络层面） 保证视图更快的 渲染速度/交互速度 （浏览器层面）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-29T03:38:55.000Z"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:published_time","content":"2024-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-29T03:38:55.000Z"}]]},"git":{"createdTime":1746970362000,"updatedTime":1756438735000,"contributors":[{"name":"exploreoo","username":"exploreoo","email":"1848820553@qq.com","commits":1,"url":"https://github.com/exploreoo"},{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":5,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":12.71,"words":3814},"filePathRelative":"posts/性能优化/前端性能优化.md","excerpt":"\\n<h4>性能优化目标</h4>\\n<ul>\\n<li>\\n<h5><strong>保证资源更快的 加载速度（网络层面）</strong></h5>\\n</li>\\n<li>\\n<h5><strong>保证视图更快的 渲染速度/交互速度 （浏览器层面）</strong></h5>\\n</li>\\n</ul>\\n","autoDesc":true}');export{p as comp,c as data};
