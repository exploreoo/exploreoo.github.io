import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as a,o as r}from"./app-DkeCzSGI.js";const i={};function l(o,e){return r(),n("div",null,e[0]||(e[0]=[a(`<h1 id="worker" tabindex="-1"><a class="header-anchor" href="#worker"><span>worker</span></a></h1><h2 id="webworker-专用-worker" tabindex="-1"><a class="header-anchor" href="#webworker-专用-worker"><span>WebWorker (专用 Worker)</span></a></h2><ol><li><strong>作用范围</strong>： <ul><li>仅能被创建它的脚本访问</li><li>每个标签页/窗口中的 Worker 实例是独立的</li></ul></li><li><strong>通信方式</strong>： <ul><li>通过 <code>postMessage</code> 与创建它的主线程直接通信</li><li>使用 <code>onmessage</code> 接收消息</li></ul></li><li><strong>生命周期</strong>： <ul><li>与创建它的页面绑定，页面关闭时 Worker 终止</li></ul></li><li><strong>典型用途</strong>： <ul><li>单个页面内的后台计算任务</li><li>避免主线程阻塞</li></ul></li></ol><h2 id="sharedworker-共享-worker" tabindex="-1"><a class="header-anchor" href="#sharedworker-共享-worker"><span>SharedWorker (共享 Worker)</span></a></h2><ol><li><strong>作用范围</strong>： <ul><li>可被同源下的多个浏览器上下文(标签页、窗口、iframe等)共享</li><li>所有同源页面共享同一个 Worker 实例</li></ul></li><li><strong>通信方式</strong>： <ul><li>通过 <code>port</code> 对象进行通信</li><li>需要显式调用 <code>port.start()</code> 开始通信</li><li>每个连接都有独立的端口</li></ul></li><li><strong>生命周期</strong>： <ul><li>只要有一个连接存在，Worker 就会保持运行</li><li>所有连接关闭后，Worker 可能被终止</li></ul></li><li><strong>典型用途</strong>： <ul><li>跨标签页/窗口的数据共享</li><li>多个页面间的状态同步</li><li>共享的后台服务</li></ul></li></ol><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><h3 id="webworker-示例" tabindex="-1"><a class="header-anchor" href="#webworker-示例"><span>WebWorker 示例</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 主线程</span></span>
<span class="line"><span>const worker = new Worker(&#39;worker.js&#39;);</span></span>
<span class="line"><span>worker.postMessage(&#39;Hello Worker&#39;);</span></span>
<span class="line"><span>worker.onmessage = (e) =&gt; {</span></span>
<span class="line"><span>  console.log(&#39;From worker:&#39;, e.data);</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// worker.js</span></span>
<span class="line"><span>self.onmessage = (e) =&gt; {</span></span>
<span class="line"><span>  console.log(&#39;From main:&#39;, e.data);</span></span>
<span class="line"><span>  postMessage(&#39;Hello Main&#39;);</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sharedworker-示例" tabindex="-1"><a class="header-anchor" href="#sharedworker-示例"><span>SharedWorker 示例</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 主线程</span></span>
<span class="line"><span>const sharedWorker = new SharedWorker(&#39;shared-worker.js&#39;);</span></span>
<span class="line"><span>sharedWorker.port.start(); // 必须显式启动</span></span>
<span class="line"><span>sharedWorker.port.postMessage(&#39;Hello SharedWorker&#39;);</span></span>
<span class="line"><span>sharedWorker.port.onmessage = (e) =&gt; {</span></span>
<span class="line"><span>  console.log(&#39;From shared worker:&#39;, e.data);</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// shared-worker.js</span></span>
<span class="line"><span>let ports = [];</span></span>
<span class="line"><span>onconnect = (e) =&gt; {</span></span>
<span class="line"><span>  const port = e.ports[0];</span></span>
<span class="line"><span>  ports.push(port);</span></span>
<span class="line"><span>  port.onmessage = (e) =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;From client:&#39;, e.data);</span></span>
<span class="line"><span>    // 可以广播给所有连接的端口</span></span>
<span class="line"><span>    ports.forEach(p =&gt; p.postMessage(&#39;Broadcast: &#39; + e.data));</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="兼容性注意事项" tabindex="-1"><a class="header-anchor" href="#兼容性注意事项"><span>兼容性注意事项</span></a></h2><ol><li>SharedWorker 的浏览器支持度较 WebWorker 低</li><li>某些浏览器(如移动端浏览器)可能不支持 SharedWorker</li><li>在 Service Worker 环境中不能使用 SharedWorker</li></ol>`,12)]))}const d=s(i,[["render",l]]),c=JSON.parse('{"path":"/posts/%E5%85%B6%E4%BB%96/webworker.html","title":"worker","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2024-10-17T00:00:00.000Z","category":["前端"],"tag":["js","多线程"],"description":"worker WebWorker (专用 Worker) 作用范围： 仅能被创建它的脚本访问 每个标签页/窗口中的 Worker 实例是独立的 通信方式： 通过 postMessage 与创建它的主线程直接通信 使用 onmessage 接收消息 生命周期： 与创建它的页面绑定，页面关闭时 Worker 终止 典型用途： 单个页面内的后台计算任务 避免...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"worker\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-28T09:19:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E5%85%B6%E4%BB%96/webworker.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"worker"}],["meta",{"property":"og:description","content":"worker WebWorker (专用 Worker) 作用范围： 仅能被创建它的脚本访问 每个标签页/窗口中的 Worker 实例是独立的 通信方式： 通过 postMessage 与创建它的主线程直接通信 使用 onmessage 接收消息 生命周期： 与创建它的页面绑定，页面关闭时 Worker 终止 典型用途： 单个页面内的后台计算任务 避免..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-28T09:19:21.000Z"}],["meta",{"property":"article:tag","content":"多线程"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-28T09:19:21.000Z"}]]},"git":{"createdTime":1746970362000,"updatedTime":1756372761000,"contributors":[{"name":"exploreoo","username":"exploreoo","email":"1848820553@qq.com","commits":1,"url":"https://github.com/exploreoo"},{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":5,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":1.43,"words":430},"filePathRelative":"posts/其他/webworker.md","excerpt":"\\n<h2>WebWorker (专用 Worker)</h2>\\n<ol>\\n<li><strong>作用范围</strong>：\\n<ul>\\n<li>仅能被创建它的脚本访问</li>\\n<li>每个标签页/窗口中的 Worker 实例是独立的</li>\\n</ul>\\n</li>\\n<li><strong>通信方式</strong>：\\n<ul>\\n<li>通过 <code>postMessage</code> 与创建它的主线程直接通信</li>\\n<li>使用 <code>onmessage</code> 接收消息</li>\\n</ul>\\n</li>\\n<li><strong>生命周期</strong>：\\n<ul>\\n<li>与创建它的页面绑定，页面关闭时 Worker 终止</li>\\n</ul>\\n</li>\\n<li><strong>典型用途</strong>：\\n<ul>\\n<li>单个页面内的后台计算任务</li>\\n<li>避免主线程阻塞</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,c as data};
