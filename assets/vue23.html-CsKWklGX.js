import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as s,a as n,o as l}from"./app-DkeCzSGI.js";const t={};function d(r,i){return l(),a("div",null,[i[0]||(i[0]=s('<h1 id="vue2-3升级策略" tabindex="-1"><a class="header-anchor" href="#vue2-3升级策略"><span>vue2/3升级策略</span></a></h1><h2 id="_1-性能提升" tabindex="-1"><a class="header-anchor" href="#_1-性能提升"><span>1. 性能提升</span></a></h2><ul><li><h4 id="模板编译器优化" tabindex="-1"><a class="header-anchor" href="#模板编译器优化"><span>模板编译器优化</span></a></h4><ul><li><p><strong>Vue 2</strong>：模板编译结果中包含了<strong>较多的运行时代码</strong>，运行时成本较高</p></li><li><p><strong>Vue 3</strong>：通过静态提升（Static Hoisting）和静态节点标记（Patch Flag）优化了虚拟 DOM 的 patch 过程，减少了运行时的开销</p></li></ul></li><li><h3 id="diff算法优化" tabindex="-1"><a class="header-anchor" href="#diff算法优化"><span>diff算法优化</span></a></h3><ul><li><p><strong>Vue 2</strong>：在比较新旧虚拟DOM树时，采用的是<strong>深度优先遍历</strong>，逐层比较节点，这种方式在<strong>处理大量节点时可能会有性能问题</strong></p></li><li><p><strong>Vue 3</strong>：编译时标记静态节点，减少运行时开销</p><ul><li><strong>静态提升</strong>：将静态节点提升到编译阶段，避免在每次渲染时重新创建这些节点</li><li><strong>缓存优化</strong>：缓存一些计算结果，避免重复计算</li><li><strong>块级优化</strong>：将模板分成多个块，每个块只包含动态内容，静态内容会被提升到块外部。这使得块内的比较更加高效</li></ul></li></ul></li><li><h3 id="tree-shaking-支持" tabindex="-1"><a class="header-anchor" href="#tree-shaking-支持"><span>Tree-shaking 支持</span></a></h3><ul><li><p><strong>Vue 2</strong>：整体打包，无法按需引入</p></li><li><p><strong>Vue 3</strong>：基于 ES Module 架构，支持 Tree-shaking，减小打包体积</p></li></ul></li></ul>',3)),n(" more "),i[1]||(i[1]=s(`<hr><h2 id="_2-api风格" tabindex="-1"><a class="header-anchor" href="#_2-api风格"><span>2. API风格</span></a></h2><ul><li><h3 id="options-api" tabindex="-1"><a class="header-anchor" href="#options-api"><span>Options API</span></a></h3><p>Vue 2 使用的是经典的 Options API，将代码按照 <code>data</code>、<code>methods</code>、<code>computed</code> 等配置项分块编写。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h3 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api"><span>Composition API</span></a></h3><p>Vue 3 引入了 Composition API，可以用函数组织逻辑，更加灵活、可组合性强，使用 <code>setup</code> 入口函数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_3-响应式" tabindex="-1"><a class="header-anchor" href="#_3-响应式"><span>3. 响应式</span></a></h2><ul><li><p>Vue 2</p><ul><li><p>使用 <code>Object.defineProperty</code> 实现响应式。</p></li><li><p>如果有一个很深的对象，需要深层次递归生成响应式，存在性能问题。</p></li><li><p>无法监听对象属性的新增/删除，无法检测到数组的直接变动，例如通过索引直接修改数组元素。通过vue.$set解决</p></li></ul></li><li><p>Vue 3</p><ul><li><p>使用基于 <code>Proxy</code> 的响应式系统，整体深度代理，劫持13种对象操作，结合 <code>reflect</code> 实现。</p></li><li><p>使用 <code>ref</code> 和 <code>reactive</code> 来定义响应式对象，<code>ref</code> 对于引用类型会自动转为 <code>reactive</code> 方法，基本数据类型则是使用使用 <code>Object.defineProperty</code></p></li></ul></li></ul><hr><h2 id="_4-新特性" tabindex="-1"><a class="header-anchor" href="#_4-新特性"><span>4. <strong>新特性</strong></span></a></h2><ul><li><h3 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment"><span>Fragment</span></a></h3><ul><li><p>Vue 2：组件必须有一个根节点。</p></li><li><p>Vue 3：支持多个根节点，无需额外包裹标签。</p></li></ul></li><li><h3 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport"><span>Teleport</span></a></h3><p>用于将子组件的 DOM 渲染到父组件 DOM 层级以外的位置（例如模态框）。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">teleport</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;body&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;modal&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">teleport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h3 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense"><span>Suspense</span></a></h3><p>异步组件加载时的占位和错误处理。</p></li></ul><hr><h2 id="_5-typescript支持" tabindex="-1"><a class="header-anchor" href="#_5-typescript支持"><span>5. TypeScript支持</span></a></h2><ul><li><strong>Vue 2</strong>：对 TypeScript 支持不完整</li><li><strong>Vue 3</strong>：源码用 TypeScript 重写，提供更好的类型推断</li></ul><hr><h2 id="_6-生命周期钩子变化" tabindex="-1"><a class="header-anchor" href="#_6-生命周期钩子变化"><span>6. 生命周期钩子变化</span></a></h2><p>Vue 3 中新增了一套用于 Composition API 的生命周期钩子名称，虽然与 Options API 保持一致功能，但使用上有细微差别：</p><table><thead><tr><th>Vue 2</th><th>Vue 3 (Composition API)</th></tr></thead><tbody><tr><td>beforeCreate</td><td><strong>使用 setup()</strong></td></tr><tr><td>created</td><td><strong>使用 setup()</strong></td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td><strong>beforeDestroy</strong></td><td>onBeforeUnmount</td></tr><tr><td><strong>destroyed</strong></td><td>onUnmounted</td></tr></tbody></table><hr><h2 id="_7-其他改动" tabindex="-1"><a class="header-anchor" href="#_7-其他改动"><span>7. 其他改动</span></a></h2><p><strong>v-model 升级</strong></p><ul><li>Vue 2：一个组件仅支持一个 <code>v-model</code>。</li><li>Vue 3：支持多个 <code>v-model</code>（如 <code>v-model:title</code>、<code>v-model:content</code>）。</li></ul><h2 id="废弃与升级" tabindex="-1"><a class="header-anchor" href="#废弃与升级"><span>废弃与升级</span></a></h2><p>Vue 3 中移除了以下一些不推荐使用的 API：</p><h3 id="vue-config-keycodes" tabindex="-1"><a class="header-anchor" href="#vue-config-keycodes"><span><code>Vue.config.keyCodes</code></span></a></h3><ul><li><p>Vue 2：允许自定义按键修饰符别名。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Vue.config.keyCodes = {</span></span>
<span class="line"><span>  v: 86</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用原生的 <code>KeyboardEvent.key</code> 属性来处理按键事件。</p></li></ul><h3 id="vue-config-ignoredelements" tabindex="-1"><a class="header-anchor" href="#vue-config-ignoredelements"><span><code>Vue.config.ignoredElements</code></span></a></h3><ul><li><p>Vue 2：允许指定 Vue 应该忽略的自定义元素。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Vue.config.ignoredElements = [&#39;my-custom-element&#39;];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用<code>isCustomElement</code>选项来配置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const app = createApp(App, {</span></span>
<span class="line"><span>  isCustomElement: tag =&gt; tag.startsWith(&#39;my-&#39;)</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="vue-set-和-vue-delete" tabindex="-1"><a class="header-anchor" href="#vue-set-和-vue-delete"><span><code>Vue.set</code> 和 <code>Vue.delete</code></span></a></h3><ul><li><p>Vue 2：用于在对象上添加或删除属性，使其响应式。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Vue.set(obj, &#39;newProp&#39;, &#39;newValue&#39;);</span></span>
<span class="line"><span>Vue.delete(obj, &#39;prop&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 3：使用<code>proxy</code>实现响应式系统，能够直接监听对象属性的新增和删除。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const obj = reactive({});</span></span>
<span class="line"><span>obj.newProp = &#39;newValue&#39;; // 自动响应式</span></span>
<span class="line"><span>delete obj.prop; // 自动响应式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="vue-observable" tabindex="-1"><a class="header-anchor" href="#vue-observable"><span><code>Vue.observable</code></span></a></h3><ul><li><p>Vue 2：用于创建一个响应式对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const state = Vue.observable({ count: 0 });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用<code>reactive</code>代替。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const state = reactive({ count: 0 });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="filters" tabindex="-1"><a class="header-anchor" href="#filters"><span><code>filters</code></span></a></h3><ul><li><p>Vue 2：允许在模板中使用过滤器来格式化输出。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;div&gt;{{ message | capitalize }}&lt;/div&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用方法或计算属性来代替。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>setup() {</span></span>
<span class="line"><span>    const capitalize = (str) =&gt; str.toUpperCase();</span></span>
<span class="line"><span>    return { capitalize };</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="inline-template" tabindex="-1"><a class="header-anchor" href="#inline-template"><span><code>inline-template</code></span></a></h3><ul><li><p>Vue 2：允许在组件上内联模板。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;my-component inline-template&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用单文件组件（SFC）或其他模板定义方式。</p></li></ul><h3 id="functional-组件选项" tabindex="-1"><a class="header-anchor" href="#functional-组件选项"><span><code>functional</code> 组件选项</span></a></h3><ul><li><p>Vue 2：允许定义无状态、无实例的函数式组件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Vue.component(&#39;my-component&#39;, {</span></span>
<span class="line"><span>    functional: true,</span></span>
<span class="line"><span>    render(h, context) {</span></span>
<span class="line"><span>      return h(&#39;div&#39;, context.props.message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用简化的函数式组件定义。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const MyComponent = (props) =&gt; {</span></span>
<span class="line"><span>    return h(&#39;div&#39;, props.message);</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="scopeid" tabindex="-1"><a class="header-anchor" href="#scopeid"><span><code>scopeId</code></span></a></h3><ul><li><p>Vue 2：用于在组件中设置作用域 ID。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Vue.component(&#39;my-component&#39;, {</span></span>
<span class="line"><span>  template: &#39;&lt;div&gt;Scoped&lt;/div&gt;&#39;,</span></span>
<span class="line"><span>  _scopeId: &#39;data-v-123&#39;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 3：推荐使用单文件组件（SFC）中的 <code>scoped</code> 样式。</p></li></ul><h3 id="v-on-native" tabindex="-1"><a class="header-anchor" href="#v-on-native"><span><code>v-on.native</code></span></a></h3><ul><li><p>Vue 2：用于在组件上监听原生 DOM 事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;my-component v-on:click.native=&quot;handleClick&quot;&gt;&lt;/my-component&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Vue 3：移除了该修饰符，推荐在组件内部使用<code>emits</code>选项来定义事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;my-component @click=&quot;handleClick&quot;&gt;&lt;/my-component&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="on-off-once" tabindex="-1"><a class="header-anchor" href="#on-off-once"><span><code>$on</code>, <code>$off</code>, <code>$once</code></span></a></h3><ul><li><p>Vue 2：用于在组件实例上或者<code>EventBus</code>监听和移除事件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>this.$on(&#39;event&#39;, this.handler);</span></span>
<span class="line"><span>this.$off(&#39;event&#39;, this.handler);</span></span>
<span class="line"><span>this.$once(&#39;event&#39;, this.handler);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vue 3：移除了这些方法，推荐使用组合式 API或 <code>mitt</code>选项来处理事件。</p></li></ul><hr><h2 id="生态兼容与迁移" tabindex="-1"><a class="header-anchor" href="#生态兼容与迁移"><span>生态兼容与迁移</span></a></h2><ul><li>Vue 3 发布后，官方也推出了 <a href="https://github.com/vuejs/core/releases/tag/v2.7.0" target="_blank" rel="noopener noreferrer">Vue 2.7 &quot;Naruto&quot;</a>，引入部分 Vue 3 的语法特性（如 Composition API）以便平滑迁移。</li><li>提供了 <a href="https://v3-migration.vuejs.org/" target="_blank" rel="noopener noreferrer">官方迁移工具</a> 帮助开发者从 Vue 2 平滑升级。</li></ul>`,45))])}const o=e(t,[["render",d]]),c=JSON.parse('{"path":"/posts/%E6%A1%86%E6%9E%B6/vue23.html","title":"vue2/3升级策略","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2024-05-17T00:00:00.000Z","category":["前端","vue"],"tag":["vue"],"description":"1. 性能提升 模板编译器优化 Vue 2：模板编译结果中包含了较多的运行时代码，运行时成本较高 Vue 3：通过静态提升（Static Hoisting）和静态节点标记（Patch Flag）优化了虚拟 DOM 的 patch 过程，减少了运行时的开销 diff算法优化 Vue 2：在比较新旧虚拟DOM树时，采用的是深度优先遍历，逐层比较节点，这种方...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue2/3升级策略\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-29T03:38:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E6%A1%86%E6%9E%B6/vue23.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"vue2/3升级策略"}],["meta",{"property":"og:description","content":"1. 性能提升 模板编译器优化 Vue 2：模板编译结果中包含了较多的运行时代码，运行时成本较高 Vue 3：通过静态提升（Static Hoisting）和静态节点标记（Patch Flag）优化了虚拟 DOM 的 patch 过程，减少了运行时的开销 diff算法优化 Vue 2：在比较新旧虚拟DOM树时，采用的是深度优先遍历，逐层比较节点，这种方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-29T03:38:55.000Z"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2024-05-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-29T03:38:55.000Z"}]]},"git":{"createdTime":1746970362000,"updatedTime":1756438735000,"contributors":[{"name":"exploreoo","username":"exploreoo","email":"1848820553@qq.com","commits":1,"url":"https://github.com/exploreoo"},{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":8,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":4.56,"words":1367},"filePathRelative":"posts/框架/vue23.md","excerpt":"\\n<h2>1. 性能提升</h2>\\n<ul>\\n<li>\\n<h4>模板编译器优化</h4>\\n<ul>\\n<li>\\n<p><strong>Vue 2</strong>：模板编译结果中包含了<strong>较多的运行时代码</strong>，运行时成本较高</p>\\n</li>\\n<li>\\n<p><strong>Vue 3</strong>：通过静态提升（Static Hoisting）和静态节点标记（Patch Flag）优化了虚拟 DOM 的 patch 过程，减少了运行时的开销</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<h3>diff算法优化</h3>\\n<ul>\\n<li>\\n<p><strong>Vue 2</strong>：在比较新旧虚拟DOM树时，采用的是<strong>深度优先遍历</strong>，逐层比较节点，这种方式在<strong>处理大量节点时可能会有性能问题</strong></p>\\n</li>\\n<li>\\n<p><strong>Vue 3</strong>：编译时标记静态节点，减少运行时开销</p>\\n<ul>\\n<li><strong>静态提升</strong>：将静态节点提升到编译阶段，避免在每次渲染时重新创建这些节点</li>\\n<li><strong>缓存优化</strong>：缓存一些计算结果，避免重复计算</li>\\n<li><strong>块级优化</strong>：将模板分成多个块，每个块只包含动态内容，静态内容会被提升到块外部。这使得块内的比较更加高效</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<h3>Tree-shaking 支持</h3>\\n<ul>\\n<li>\\n<p><strong>Vue 2</strong>：整体打包，无法按需引入</p>\\n</li>\\n<li>\\n<p><strong>Vue 3</strong>：基于 ES Module 架构，支持 Tree-shaking，减小打包体积</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n","autoDesc":true}');export{o as comp,c as data};
