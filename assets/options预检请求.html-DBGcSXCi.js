import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as e,a as n,o as a}from"./app-DkeCzSGI.js";const o={};function l(d,t){return a(),i("div",null,[t[0]||(t[0]=e('<h1 id="options预检请求" tabindex="-1"><a class="header-anchor" href="#options预检请求"><span>OPTIONS预检请求</span></a></h1><h2 id="什么是-options-预检请求" tabindex="-1"><a class="header-anchor" href="#什么是-options-预检请求"><span>什么是 OPTIONS 预检请求？</span></a></h2><p>必须是<strong>跨域</strong>的场景下，当你通过浏览器发送一个请求时，为了保证<strong>跨域安全控制</strong>，浏览器不会立即发送该请求，而是<strong>自动先发起一个 <code>OPTIONS</code> 请求</strong>，询问目标服务器是否允许你真正的请求行为，这就是所谓的<strong>预检请求（preflight request）</strong>。</p><p>另外，预检请求<strong>不会携带cookies</strong>，即使设置了<strong>withCredentials: true</strong>或者<strong>credentials: &#39;include&#39;</strong>。</p><h2 id="哪些请求会触发预检" tabindex="-1"><a class="header-anchor" href="#哪些请求会触发预检"><span>哪些请求会触发预检？</span></a></h2><p><strong>跨域</strong>场景的前提下，只要<strong>满足以下任一条件</strong>，就会触发预检请求：</p><ul><li>请求方法不是 <code>GET</code>、<code>POST</code> 或 <code>HEAD</code>（如：<code>PUT</code>、<code>DELETE</code>）</li><li>使用了自定义请求头（如：<code>Authorization</code>、<code>X-Token</code>、<code>Content-Type: application/json</code>），也就是除以下这些之外的： <ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code>（仅限 <code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>）</li></ul></li></ul>',7)),n(" more "),t[1]||(t[1]=e(`<h2 id="options-请求流程简析" tabindex="-1"><a class="header-anchor" href="#options-请求流程简析"><span>OPTIONS 请求流程简析</span></a></h2><p>请求发出前，浏览器会：</p><ol><li><p>向服务器发一个 <code>OPTIONS</code> 请求，头部中包含实际请求的信息（方法、请求头等）。</p></li><li><p>如果服务器返回了正确的 CORS 头（如 <code>Access-Control-Allow-*</code>），浏览器才会继续发实际请求。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Access-Control-Allow-Origin: https://example.com</span></span>
<span class="line"><span>Access-Control-Allow-Methods: PUT, DELETE</span></span>
<span class="line"><span>Access-Control-Allow-Headers: Authorization</span></span>
<span class="line"><span>Access-Control-Allow-Credentials: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>否则，请求会被拦截，控制台报错。</p></li></ol><h2 id="options-请求的优缺点" tabindex="-1"><a class="header-anchor" href="#options-请求的优缺点"><span>OPTIONS 请求的优缺点</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h3><ul><li><strong>增强安全性</strong>：服务器有机会拒绝潜在危险的跨域请求。</li><li><strong>标准化机制</strong>：跨浏览器一致，支持精细化跨域控制。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h3><ul><li><strong>增加性能开销</strong>：每次预检多了一次 HTTP 往返。</li><li><strong>难以调试</strong>：很多开发者误以为接口被调用多次。</li><li><strong>受限于浏览器控制</strong>：客户端无法完全规避。</li></ul><h2 id="vue-cli-中的开发代理如何影响预检" tabindex="-1"><a class="header-anchor" href="#vue-cli-中的开发代理如何影响预检"><span>Vue CLI 中的开发代理如何影响预检？</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">devServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;/api&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      target</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://localhost:3000&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      changeOrigin</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      pathRewrite</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;^/api&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置让浏览器以为它是在本地请求本地接口，实际上是由 dev server 中转到后端。<strong>因为浏览器感知不到跨域行为，所以不会触发预检请求。</strong></p><p><strong>一旦进入生产环境</strong>，前后端部署在不同源上，CORS 就生效，预检请求便真实发生。</p><h2 id="http-1-1-与-http-2-对-cors-预检的影响" tabindex="-1"><a class="header-anchor" href="#http-1-1-与-http-2-对-cors-预检的影响"><span>HTTP/1.1 与 HTTP/2 对 CORS 预检的影响</span></a></h2><p>虽然 OPTIONS 请求不是 HTTP 协议的专属特性（而是浏览器行为），但不同的协议版本会<strong>对其性能产生明显影响</strong>：</p><table><thead><tr><th>特性</th><th>HTTP/1.1</th><th>HTTP/2</th></tr></thead><tbody><tr><td>请求连接数</td><td>同域最多 6 条连接</td><td>单连接多路复用，避免连接阻塞</td></tr><tr><td>OPTIONS 等待</td><td>请求顺序执行，预检阻塞主请求</td><td>并发发起，预检不会阻塞主请求</td></tr><tr><td>延迟表现</td><td>预检和实际请求串行，延迟高</td><td>并行传输，整体响应更快</td></tr><tr><td>实践影响</td><td>预检耗时更明显，尤其高频接口场景</td><td>即使触发预检，用户感知也较小</td></tr></tbody></table><h2 id="常见场景应用" tabindex="-1"><a class="header-anchor" href="#常见场景应用"><span>常见场景应用</span></a></h2><table><thead><tr><th>场景</th><th>是否会触发预检？</th><th>原因</th></tr></thead><tbody><tr><td>POST + <code>Content-Type: application/json</code></td><td>会</td><td>非简单请求头</td></tr><tr><td>GET 请求，无认证</td><td>否</td><td>简单请求</td></tr><tr><td>使用 fetch + token</td><td>会</td><td>自定义头触发预检</td></tr><tr><td>Vue CLI + devServer 代理</td><td>否</td><td>非跨域（由代理伪装）</td></tr><tr><td>生产环境调用后端接口</td><td>会</td><td>跨域访问</td></tr></tbody></table><h2 id="如何优化预检请求" tabindex="-1"><a class="header-anchor" href="#如何优化预检请求"><span>如何优化预检请求？</span></a></h2><ol><li><p><strong>尽量使用简单请求</strong>：</p><ul><li>请求方法用 <code>GET</code> 或 <code>POST</code></li><li>请求头避免使用 <code>application/json</code>，可用 <code>x-www-form-urlencoded</code> 替代</li></ul></li><li><p><strong>设置预检缓存</strong>：</p><ul><li>后端响应中添加 <code>Access-Control-Max-Age: 3600</code>，让浏览器缓存预检结果</li></ul></li><li><p><strong>后端统一允许请求头/方法</strong>：</p><ul><li>避免因为接口策略差异导致每个接口都触发预检</li></ul></li><li><p><strong>使用代理在开发时屏蔽跨域</strong>（仅限开发时）</p></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>预检请求是现代浏览器出于安全考虑而引入的机制。它本身是中立的，但在实际开发中会带来性能和复杂度的权衡。理解它的原理与触发机制后，我们不仅能正确调试跨域问题，也能在性能上做出有效优化。</p>`,21))])}const c=s(o,[["render",l]]),h=JSON.parse(`{"path":"/posts/%E7%BD%91%E7%BB%9C/options%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82.html","title":"OPTIONS预检请求","lang":"zh-CN","frontmatter":{"icon":"file-contract","date":"2025-03-15T00:00:00.000Z","category":["前端"],"tag":["http"],"description":"什么是 OPTIONS 预检请求？ 必须是跨域的场景下，当你通过浏览器发送一个请求时，为了保证跨域安全控制，浏览器不会立即发送该请求，而是自动先发起一个 OPTIONS 请求，询问目标服务器是否允许你真正的请求行为，这就是所谓的预检请求（preflight request）。 另外，预检请求不会携带cookies，即使设置了withCredential...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OPTIONS预检请求\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-28T09:19:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.ws\\",\\"url\\":\\"https://exploreoo.github.io/\\",\\"email\\":\\"3351550900@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://exploreoo.github.io/posts/%E7%BD%91%E7%BB%9C/options%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82.html"}],["meta",{"property":"og:site_name","content":"WSPACE"}],["meta",{"property":"og:title","content":"OPTIONS预检请求"}],["meta",{"property":"og:description","content":"什么是 OPTIONS 预检请求？ 必须是跨域的场景下，当你通过浏览器发送一个请求时，为了保证跨域安全控制，浏览器不会立即发送该请求，而是自动先发起一个 OPTIONS 请求，询问目标服务器是否允许你真正的请求行为，这就是所谓的预检请求（preflight request）。 另外，预检请求不会携带cookies，即使设置了withCredential..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-28T09:19:21.000Z"}],["meta",{"property":"article:tag","content":"http"}],["meta",{"property":"article:published_time","content":"2025-03-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-28T09:19:21.000Z"}]]},"git":{"createdTime":1746970362000,"updatedTime":1756372761000,"contributors":[{"name":"exploreoo","username":"exploreoo","email":"1848820553@qq.com","commits":1,"url":"https://github.com/exploreoo"},{"name":"wangshuang70","username":"wangshuang70","email":"wangshuang70@meicloud.com","commits":4,"url":"https://github.com/wangshuang70"}]},"readingTime":{"minutes":3.39,"words":1017},"filePathRelative":"posts/网络/options预检请求.md","excerpt":"\\n<h2>什么是 OPTIONS 预检请求？</h2>\\n<p>必须是<strong>跨域</strong>的场景下，当你通过浏览器发送一个请求时，为了保证<strong>跨域安全控制</strong>，浏览器不会立即发送该请求，而是<strong>自动先发起一个 <code>OPTIONS</code> 请求</strong>，询问目标服务器是否允许你真正的请求行为，这就是所谓的<strong>预检请求（preflight request）</strong>。</p>\\n<p>另外，预检请求<strong>不会携带cookies</strong>，即使设置了<strong>withCredentials: true</strong>或者<strong>credentials: 'include'</strong>。</p>\\n<h2>哪些请求会触发预检？</h2>\\n<p><strong>跨域</strong>场景的前提下，只要<strong>满足以下任一条件</strong>，就会触发预检请求：</p>\\n<ul>\\n<li>请求方法不是 <code>GET</code>、<code>POST</code> 或 <code>HEAD</code>（如：<code>PUT</code>、<code>DELETE</code>）</li>\\n<li>使用了自定义请求头（如：<code>Authorization</code>、<code>X-Token</code>、<code>Content-Type: application/json</code>），也就是除以下这些之外的：\\n<ul>\\n<li><code>Accept</code></li>\\n<li><code>Accept-Language</code></li>\\n<li><code>Content-Language</code></li>\\n<li><code>Content-Type</code>（仅限 <code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>）</li>\\n</ul>\\n</li>\\n</ul>\\n","autoDesc":true}`);export{c as comp,h as data};
